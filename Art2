#Multistage expansion planning for active distribution networks under demand and Distributed Generation uncertainties

#The first part of the chromosome refers to the possibility of network topology changes through changes in the status of some switches already 
#installed or through the installation of newswitches. In this case, 3 bits are used resulting in 8 possibilities for each alternative.
#The values of the parameters were obtained after exhaustive tests
#Selection - tournament
#Crossover - 2 points 
#Mutation - 1 bit
#CrossoverRate - 0.7
#MutationRate = 0.7
#PopulationSize = 200
#Max no. of generations = 200

#Mutation   
function flip(recombinant::Vector{Bool})
    s = length(recombinant)
    pos = rand(1:s)
    recombinant[pos] = !recombinant[pos]
    return recombinant
end

#Crossover
function vswap!(v1::T, v2::T, idx::Int) where {T <: Vector}
    val = v1[idx]
    v1[idx] = v2[idx]
    v2[idx] = val
end

function twopoint(v1::T, v2::T) where {T <: Vector}
    l = length(v1)
    c1 = copy(v1)
    c2 = copy(v2)
    from, to = rand(1:l, 2)
    from, to = from > to ? (to, from)  : (from, to)
    for i in from:to
        vswap!(c1, c2, i)
    end
    return c1, c2
end

#Selection
function tournament(groupSize :: Int)
    groupSize <= 0 && error("Group size needs to be positive")
    function tournamentN(fitness::Vector{Float64}, N::Int)
        selection = Array{Int}(N)

        nFitness = length(fitness)

        for i in 1:N
            contender = unique(rand(1:nFitness, groupSize))
            while length(contender) < groupSize
                contender = unique(vcat(contender, rand(1:nFitness, groupSize - length(contender))))
            end

            winner = first(contender)
            winnerFitness = fitness[winner]
            for idx = 2:groupSize
                c = contender[idx]
                if winnerFitness < fitness[c]
                    winner = c
                    winnerFitness = fitness[c]
                end
            end

            selection[i] = winner
        end
        return selection
    end
    return tournamentN
end
