function mating(population::Array{Tuple{Float64,Array{Tuple{Int64,Int64},1}},1})
    fit = [ind[1] for ind in population]
    cum_p = cumsum(fit ./ sum(fit))
    mates = zeros(Int,length(population))
    for i in 1:length(population)
        j = 1
        while cum_p[j] < rand()
            j += 1
        end
        mates[i] = j
    end
    mates
end

function tournament(population::Array{Tuple{Float64,Array{Tuple{Int64,Int64},1}},1})
length(population) <= 0 && error("Population length needs to be positive")
fit = [ind[1] for ind in population]
    cum_p = cumsum(fit ./ sum(fit))
#   function tournamentN(fitness::Vector{Float64}, N::Int)
 mates = zeros(Int,length(population))
# nFitness = length(fit)
for i in 1:length(population)
#j = 1
#c = 1  
          contender = unique(rand(1:length(fit), length(population))
            while length(contender) < length(population)
                contender = unique(vcat(contender, rand(1:length(fit), length(population)- length(contender))))
            end
            winner = fit(contender)
            winnerFitness = fit[winner]
            for idx = 2:length(population)
                c = contender[idx]
                if winnerFitness < fit[c]
                    winner = c
                    winnerFitness = fit[c]
                end
            end
            mates[i] = winner
        end
        return mates
    end
   


#function tournament(groupSize :: Int)
#    groupSize <= 0 && error("Group size needs to be positive")
  #  function tournamentN(fitness::Vector{Float64}, N::Int)
    #    selection = Array{Int}(N)
 #       nFitness = length(fitness)
        for i in 1:N
            contender = unique(rand(1:nFitness, groupSize))
            while length(contender) < groupSize
                contender = unique(vcat(contender, rand(1:nFitness, groupSize - length(contender))))
            end

            winner = first(contender)
            winnerFitness = fitness[winner]
            for idx = 2:groupSize
                c = contender[idx]
                if winnerFitness < fitness[c]
                    winner = c
                    winnerFitness = fitness[c]
                end
            end

            selection[i] = winner
        end
        return selection
    end
    return tournamentN
end
